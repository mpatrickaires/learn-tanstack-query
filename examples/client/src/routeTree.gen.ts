/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as QueryRetriesRouteImport } from './routes/query-retries'
import { Route as ParallelQueriesManualRouteImport } from './routes/parallel-queries-manual'
import { Route as ParallelQueriesDynamicRouteImport } from './routes/parallel-queries-dynamic'
import { Route as FetchingIndicatorsRouteImport } from './routes/fetching-indicators'
import { Route as DedupingRouteImport } from './routes/deduping'
import { Route as IndexRouteImport } from './routes/index'

const QueryRetriesRoute = QueryRetriesRouteImport.update({
  id: '/query-retries',
  path: '/query-retries',
  getParentRoute: () => rootRouteImport,
} as any)
const ParallelQueriesManualRoute = ParallelQueriesManualRouteImport.update({
  id: '/parallel-queries-manual',
  path: '/parallel-queries-manual',
  getParentRoute: () => rootRouteImport,
} as any)
const ParallelQueriesDynamicRoute = ParallelQueriesDynamicRouteImport.update({
  id: '/parallel-queries-dynamic',
  path: '/parallel-queries-dynamic',
  getParentRoute: () => rootRouteImport,
} as any)
const FetchingIndicatorsRoute = FetchingIndicatorsRouteImport.update({
  id: '/fetching-indicators',
  path: '/fetching-indicators',
  getParentRoute: () => rootRouteImport,
} as any)
const DedupingRoute = DedupingRouteImport.update({
  id: '/deduping',
  path: '/deduping',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deduping': typeof DedupingRoute
  '/fetching-indicators': typeof FetchingIndicatorsRoute
  '/parallel-queries-dynamic': typeof ParallelQueriesDynamicRoute
  '/parallel-queries-manual': typeof ParallelQueriesManualRoute
  '/query-retries': typeof QueryRetriesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deduping': typeof DedupingRoute
  '/fetching-indicators': typeof FetchingIndicatorsRoute
  '/parallel-queries-dynamic': typeof ParallelQueriesDynamicRoute
  '/parallel-queries-manual': typeof ParallelQueriesManualRoute
  '/query-retries': typeof QueryRetriesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/deduping': typeof DedupingRoute
  '/fetching-indicators': typeof FetchingIndicatorsRoute
  '/parallel-queries-dynamic': typeof ParallelQueriesDynamicRoute
  '/parallel-queries-manual': typeof ParallelQueriesManualRoute
  '/query-retries': typeof QueryRetriesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deduping'
    | '/fetching-indicators'
    | '/parallel-queries-dynamic'
    | '/parallel-queries-manual'
    | '/query-retries'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deduping'
    | '/fetching-indicators'
    | '/parallel-queries-dynamic'
    | '/parallel-queries-manual'
    | '/query-retries'
  id:
    | '__root__'
    | '/'
    | '/deduping'
    | '/fetching-indicators'
    | '/parallel-queries-dynamic'
    | '/parallel-queries-manual'
    | '/query-retries'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DedupingRoute: typeof DedupingRoute
  FetchingIndicatorsRoute: typeof FetchingIndicatorsRoute
  ParallelQueriesDynamicRoute: typeof ParallelQueriesDynamicRoute
  ParallelQueriesManualRoute: typeof ParallelQueriesManualRoute
  QueryRetriesRoute: typeof QueryRetriesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/query-retries': {
      id: '/query-retries'
      path: '/query-retries'
      fullPath: '/query-retries'
      preLoaderRoute: typeof QueryRetriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/parallel-queries-manual': {
      id: '/parallel-queries-manual'
      path: '/parallel-queries-manual'
      fullPath: '/parallel-queries-manual'
      preLoaderRoute: typeof ParallelQueriesManualRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/parallel-queries-dynamic': {
      id: '/parallel-queries-dynamic'
      path: '/parallel-queries-dynamic'
      fullPath: '/parallel-queries-dynamic'
      preLoaderRoute: typeof ParallelQueriesDynamicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fetching-indicators': {
      id: '/fetching-indicators'
      path: '/fetching-indicators'
      fullPath: '/fetching-indicators'
      preLoaderRoute: typeof FetchingIndicatorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deduping': {
      id: '/deduping'
      path: '/deduping'
      fullPath: '/deduping'
      preLoaderRoute: typeof DedupingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DedupingRoute: DedupingRoute,
  FetchingIndicatorsRoute: FetchingIndicatorsRoute,
  ParallelQueriesDynamicRoute: ParallelQueriesDynamicRoute,
  ParallelQueriesManualRoute: ParallelQueriesManualRoute,
  QueryRetriesRoute: QueryRetriesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
