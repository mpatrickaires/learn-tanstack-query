/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RefetchOnMountRouteImport } from './routes/refetch-on-mount'
import { Route as QueryRetriesRouteImport } from './routes/query-retries'
import { Route as PlaceholderDataRouteImport } from './routes/placeholder-data'
import { Route as ParallelQueriesManualRouteImport } from './routes/parallel-queries-manual'
import { Route as ParallelQueriesDynamicRouteImport } from './routes/parallel-queries-dynamic'
import { Route as PaginatedQueriesRouteImport } from './routes/paginated-queries'
import { Route as MutationScopeRouteImport } from './routes/mutation-scope'
import { Route as InvalidationsFromMutationsRouteImport } from './routes/invalidations-from-mutations'
import { Route as InvalidateQueriesRouteImport } from './routes/invalidate-queries'
import { Route as InitialQueryDataRouteImport } from './routes/initial-query-data'
import { Route as InfiniteQueriesRouteImport } from './routes/infinite-queries'
import { Route as FetchingIndicatorsRouteImport } from './routes/fetching-indicators'
import { Route as DedupingRouteImport } from './routes/deduping'
import { Route as IndexRouteImport } from './routes/index'

const RefetchOnMountRoute = RefetchOnMountRouteImport.update({
  id: '/refetch-on-mount',
  path: '/refetch-on-mount',
  getParentRoute: () => rootRouteImport,
} as any)
const QueryRetriesRoute = QueryRetriesRouteImport.update({
  id: '/query-retries',
  path: '/query-retries',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaceholderDataRoute = PlaceholderDataRouteImport.update({
  id: '/placeholder-data',
  path: '/placeholder-data',
  getParentRoute: () => rootRouteImport,
} as any)
const ParallelQueriesManualRoute = ParallelQueriesManualRouteImport.update({
  id: '/parallel-queries-manual',
  path: '/parallel-queries-manual',
  getParentRoute: () => rootRouteImport,
} as any)
const ParallelQueriesDynamicRoute = ParallelQueriesDynamicRouteImport.update({
  id: '/parallel-queries-dynamic',
  path: '/parallel-queries-dynamic',
  getParentRoute: () => rootRouteImport,
} as any)
const PaginatedQueriesRoute = PaginatedQueriesRouteImport.update({
  id: '/paginated-queries',
  path: '/paginated-queries',
  getParentRoute: () => rootRouteImport,
} as any)
const MutationScopeRoute = MutationScopeRouteImport.update({
  id: '/mutation-scope',
  path: '/mutation-scope',
  getParentRoute: () => rootRouteImport,
} as any)
const InvalidationsFromMutationsRoute =
  InvalidationsFromMutationsRouteImport.update({
    id: '/invalidations-from-mutations',
    path: '/invalidations-from-mutations',
    getParentRoute: () => rootRouteImport,
  } as any)
const InvalidateQueriesRoute = InvalidateQueriesRouteImport.update({
  id: '/invalidate-queries',
  path: '/invalidate-queries',
  getParentRoute: () => rootRouteImport,
} as any)
const InitialQueryDataRoute = InitialQueryDataRouteImport.update({
  id: '/initial-query-data',
  path: '/initial-query-data',
  getParentRoute: () => rootRouteImport,
} as any)
const InfiniteQueriesRoute = InfiniteQueriesRouteImport.update({
  id: '/infinite-queries',
  path: '/infinite-queries',
  getParentRoute: () => rootRouteImport,
} as any)
const FetchingIndicatorsRoute = FetchingIndicatorsRouteImport.update({
  id: '/fetching-indicators',
  path: '/fetching-indicators',
  getParentRoute: () => rootRouteImport,
} as any)
const DedupingRoute = DedupingRouteImport.update({
  id: '/deduping',
  path: '/deduping',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deduping': typeof DedupingRoute
  '/fetching-indicators': typeof FetchingIndicatorsRoute
  '/infinite-queries': typeof InfiniteQueriesRoute
  '/initial-query-data': typeof InitialQueryDataRoute
  '/invalidate-queries': typeof InvalidateQueriesRoute
  '/invalidations-from-mutations': typeof InvalidationsFromMutationsRoute
  '/mutation-scope': typeof MutationScopeRoute
  '/paginated-queries': typeof PaginatedQueriesRoute
  '/parallel-queries-dynamic': typeof ParallelQueriesDynamicRoute
  '/parallel-queries-manual': typeof ParallelQueriesManualRoute
  '/placeholder-data': typeof PlaceholderDataRoute
  '/query-retries': typeof QueryRetriesRoute
  '/refetch-on-mount': typeof RefetchOnMountRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deduping': typeof DedupingRoute
  '/fetching-indicators': typeof FetchingIndicatorsRoute
  '/infinite-queries': typeof InfiniteQueriesRoute
  '/initial-query-data': typeof InitialQueryDataRoute
  '/invalidate-queries': typeof InvalidateQueriesRoute
  '/invalidations-from-mutations': typeof InvalidationsFromMutationsRoute
  '/mutation-scope': typeof MutationScopeRoute
  '/paginated-queries': typeof PaginatedQueriesRoute
  '/parallel-queries-dynamic': typeof ParallelQueriesDynamicRoute
  '/parallel-queries-manual': typeof ParallelQueriesManualRoute
  '/placeholder-data': typeof PlaceholderDataRoute
  '/query-retries': typeof QueryRetriesRoute
  '/refetch-on-mount': typeof RefetchOnMountRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/deduping': typeof DedupingRoute
  '/fetching-indicators': typeof FetchingIndicatorsRoute
  '/infinite-queries': typeof InfiniteQueriesRoute
  '/initial-query-data': typeof InitialQueryDataRoute
  '/invalidate-queries': typeof InvalidateQueriesRoute
  '/invalidations-from-mutations': typeof InvalidationsFromMutationsRoute
  '/mutation-scope': typeof MutationScopeRoute
  '/paginated-queries': typeof PaginatedQueriesRoute
  '/parallel-queries-dynamic': typeof ParallelQueriesDynamicRoute
  '/parallel-queries-manual': typeof ParallelQueriesManualRoute
  '/placeholder-data': typeof PlaceholderDataRoute
  '/query-retries': typeof QueryRetriesRoute
  '/refetch-on-mount': typeof RefetchOnMountRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deduping'
    | '/fetching-indicators'
    | '/infinite-queries'
    | '/initial-query-data'
    | '/invalidate-queries'
    | '/invalidations-from-mutations'
    | '/mutation-scope'
    | '/paginated-queries'
    | '/parallel-queries-dynamic'
    | '/parallel-queries-manual'
    | '/placeholder-data'
    | '/query-retries'
    | '/refetch-on-mount'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deduping'
    | '/fetching-indicators'
    | '/infinite-queries'
    | '/initial-query-data'
    | '/invalidate-queries'
    | '/invalidations-from-mutations'
    | '/mutation-scope'
    | '/paginated-queries'
    | '/parallel-queries-dynamic'
    | '/parallel-queries-manual'
    | '/placeholder-data'
    | '/query-retries'
    | '/refetch-on-mount'
  id:
    | '__root__'
    | '/'
    | '/deduping'
    | '/fetching-indicators'
    | '/infinite-queries'
    | '/initial-query-data'
    | '/invalidate-queries'
    | '/invalidations-from-mutations'
    | '/mutation-scope'
    | '/paginated-queries'
    | '/parallel-queries-dynamic'
    | '/parallel-queries-manual'
    | '/placeholder-data'
    | '/query-retries'
    | '/refetch-on-mount'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DedupingRoute: typeof DedupingRoute
  FetchingIndicatorsRoute: typeof FetchingIndicatorsRoute
  InfiniteQueriesRoute: typeof InfiniteQueriesRoute
  InitialQueryDataRoute: typeof InitialQueryDataRoute
  InvalidateQueriesRoute: typeof InvalidateQueriesRoute
  InvalidationsFromMutationsRoute: typeof InvalidationsFromMutationsRoute
  MutationScopeRoute: typeof MutationScopeRoute
  PaginatedQueriesRoute: typeof PaginatedQueriesRoute
  ParallelQueriesDynamicRoute: typeof ParallelQueriesDynamicRoute
  ParallelQueriesManualRoute: typeof ParallelQueriesManualRoute
  PlaceholderDataRoute: typeof PlaceholderDataRoute
  QueryRetriesRoute: typeof QueryRetriesRoute
  RefetchOnMountRoute: typeof RefetchOnMountRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/refetch-on-mount': {
      id: '/refetch-on-mount'
      path: '/refetch-on-mount'
      fullPath: '/refetch-on-mount'
      preLoaderRoute: typeof RefetchOnMountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/query-retries': {
      id: '/query-retries'
      path: '/query-retries'
      fullPath: '/query-retries'
      preLoaderRoute: typeof QueryRetriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/placeholder-data': {
      id: '/placeholder-data'
      path: '/placeholder-data'
      fullPath: '/placeholder-data'
      preLoaderRoute: typeof PlaceholderDataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/parallel-queries-manual': {
      id: '/parallel-queries-manual'
      path: '/parallel-queries-manual'
      fullPath: '/parallel-queries-manual'
      preLoaderRoute: typeof ParallelQueriesManualRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/parallel-queries-dynamic': {
      id: '/parallel-queries-dynamic'
      path: '/parallel-queries-dynamic'
      fullPath: '/parallel-queries-dynamic'
      preLoaderRoute: typeof ParallelQueriesDynamicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/paginated-queries': {
      id: '/paginated-queries'
      path: '/paginated-queries'
      fullPath: '/paginated-queries'
      preLoaderRoute: typeof PaginatedQueriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mutation-scope': {
      id: '/mutation-scope'
      path: '/mutation-scope'
      fullPath: '/mutation-scope'
      preLoaderRoute: typeof MutationScopeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/invalidations-from-mutations': {
      id: '/invalidations-from-mutations'
      path: '/invalidations-from-mutations'
      fullPath: '/invalidations-from-mutations'
      preLoaderRoute: typeof InvalidationsFromMutationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/invalidate-queries': {
      id: '/invalidate-queries'
      path: '/invalidate-queries'
      fullPath: '/invalidate-queries'
      preLoaderRoute: typeof InvalidateQueriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/initial-query-data': {
      id: '/initial-query-data'
      path: '/initial-query-data'
      fullPath: '/initial-query-data'
      preLoaderRoute: typeof InitialQueryDataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/infinite-queries': {
      id: '/infinite-queries'
      path: '/infinite-queries'
      fullPath: '/infinite-queries'
      preLoaderRoute: typeof InfiniteQueriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fetching-indicators': {
      id: '/fetching-indicators'
      path: '/fetching-indicators'
      fullPath: '/fetching-indicators'
      preLoaderRoute: typeof FetchingIndicatorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deduping': {
      id: '/deduping'
      path: '/deduping'
      fullPath: '/deduping'
      preLoaderRoute: typeof DedupingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DedupingRoute: DedupingRoute,
  FetchingIndicatorsRoute: FetchingIndicatorsRoute,
  InfiniteQueriesRoute: InfiniteQueriesRoute,
  InitialQueryDataRoute: InitialQueryDataRoute,
  InvalidateQueriesRoute: InvalidateQueriesRoute,
  InvalidationsFromMutationsRoute: InvalidationsFromMutationsRoute,
  MutationScopeRoute: MutationScopeRoute,
  PaginatedQueriesRoute: PaginatedQueriesRoute,
  ParallelQueriesDynamicRoute: ParallelQueriesDynamicRoute,
  ParallelQueriesManualRoute: ParallelQueriesManualRoute,
  PlaceholderDataRoute: PlaceholderDataRoute,
  QueryRetriesRoute: QueryRetriesRoute,
  RefetchOnMountRoute: RefetchOnMountRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
